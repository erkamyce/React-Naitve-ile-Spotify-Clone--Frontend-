{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport { BarCodeScanner } from \"expo-barcode-scanner\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport TabOneScreen from \"../screens/TabOneScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar ScanScreen = function ScanScreen(props) {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      permission = _useState4[0],\n      setPermission = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      scanner = _useState6[0],\n      setScanner = _useState6[1];\n\n  useEffect(function () {\n    requestCameraPermission();\n  }, []);\n\n  var requestCameraPermission = function _callee() {\n    var _await$BarCodeScanner, status, granted;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n          case 3:\n            _await$BarCodeScanner = _context.sent;\n            status = _await$BarCodeScanner.status;\n            granted = _await$BarCodeScanner.granted;\n            console.log(\"Status: \" + status + \", Granted: \" + granted);\n\n            if (status === \"granted\") {\n              console.log(\"Access granted\");\n              setPermission(true);\n            } else {\n              setPermission(false);\n            }\n\n            _context.next = 14;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            console.error(_context.t0);\n            setPermission(false);\n\n          case 14:\n            _context.prev = 14;\n            setLoading(false);\n            return _context.finish(14);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10, 14, 17]], Promise);\n  };\n\n  if (loading) return _jsx(Text, {\n    children: \"Requesting permission ...\"\n  });\n\n  if (permission && scanner == true) {\n    return _jsx(BarCodeScanner, {\n      style: [styles.container],\n      onBarCodeScanned: function onBarCodeScanned(_ref) {\n        var type = _ref.type,\n            data = _ref.data;\n\n        try {\n          console.log(type);\n          console.log(data);\n          Alert.alert(data);\n          setScanner(false);\n        } catch (error) {\n          console.error(\"Unable to parse string: \", error);\n        }\n      }\n    });\n  } else {\n    return _jsx(TabOneScreen, {\n      path1: \"/screen/TabOneScreen.tsx\"\n    });\n  }\n};\n\nexport default ScanScreen;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 10,\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  text: {\n    marginTop: 15,\n    backgroundColor: \"white\"\n  },\n  textError: {\n    color: \"red\"\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","BarCodeScanner","TabOneScreen","ScanScreen","props","loading","setLoading","permission","setPermission","scanner","setScanner","requestCameraPermission","requestPermissionsAsync","status","granted","console","log","error","styles","container","type","data","Alert","alert","StyleSheet","create","flex","padding","alignItems","justifyContent","text","marginTop","backgroundColor","textError","color"],"sources":["C:/Users/erkam/Desktop/spotify/screens/Scan.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { BarCodeScanner } from \"expo-barcode-scanner\";\r\nimport { Text, StyleSheet, Button, Alert } from \"react-native\";\r\nimport { IStackScreenProps } from \"../components/library/IStackScreenProps\";\r\nimport TabOneScreen from '../screens/TabOneScreen';\r\nimport { RootTabScreenProps } from '../types';\r\n\r\nconst ScanScreen: React.FunctionComponent<IStackScreenProps> = (props) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [permission, setPermission] = useState(true);\r\n  const [scanner, setScanner] = useState(true);\r\n\r\n  useEffect(() => {\r\n    requestCameraPermission();\r\n  }, []);\r\n\r\n  const requestCameraPermission = async () => {\r\n    try {\r\n      const { status, granted } =\r\n        await BarCodeScanner.requestPermissionsAsync();\r\n      console.log(`Status: ${status}, Granted: ${granted}`);\r\n\r\n      if (status === \"granted\") {\r\n        console.log(\"Access granted\");\r\n        setPermission(true);\r\n      } else {\r\n        setPermission(false);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      setPermission(false);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (loading) return <Text>Requesting permission ...</Text>;\r\n\r\n  if (permission && scanner == true) {\r\n    return (\r\n      <BarCodeScanner\r\n        style={[styles.container]}\r\n        onBarCodeScanned={({ type, data }) => {\r\n          try {\r\n            console.log(type);\r\n            console.log(data);\r\n            Alert.alert(data);\r\n            setScanner(false);\r\n          } catch (error) {\r\n            console.error(\"Unable to parse string: \", error);\r\n          }\r\n        }}\r\n      ></BarCodeScanner>\r\n    );\r\n  } else {\r\n    return <TabOneScreen path1=\"/screen/TabOneScreen.tsx\"/>;\r\n  }\r\n};\r\n\r\nexport default ScanScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 10,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  text: {\r\n    marginTop: 15,\r\n    backgroundColor: \"white\",\r\n  },\r\n  textError: {\r\n    color: \"red\",\r\n  },\r\n});\r\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,sBAA/B;;;;AAGA,OAAOC,YAAP;;;AAGA,IAAMC,UAAsD,GAAG,SAAzDA,UAAyD,CAACC,KAAD,EAAW;EACxE,gBAA8BL,QAAQ,CAAC,IAAD,CAAtC;EAAA;EAAA,IAAOM,OAAP;EAAA,IAAgBC,UAAhB;;EACA,iBAAoCP,QAAQ,CAAC,IAAD,CAA5C;EAAA;EAAA,IAAOQ,UAAP;EAAA,IAAmBC,aAAnB;;EACA,iBAA8BT,QAAQ,CAAC,IAAD,CAAtC;EAAA;EAAA,IAAOU,OAAP;EAAA,IAAgBC,UAAhB;;EAEAV,SAAS,CAAC,YAAM;IACdW,uBAAuB;EACxB,CAFQ,EAEN,EAFM,CAAT;;EAIA,IAAMA,uBAAuB,GAAG;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA;YAAA,iCAGpBV,cAAc,CAACW,uBAAf,EAHoB;;UAAA;YAAA;YAEpBC,MAFoB,yBAEpBA,MAFoB;YAEZC,OAFY,yBAEZA,OAFY;YAI5BC,OAAO,CAACC,GAAR,cAAuBH,MAAvB,mBAA2CC,OAA3C;;YAEA,IAAID,MAAM,KAAK,SAAf,EAA0B;cACxBE,OAAO,CAACC,GAAR,CAAY,gBAAZ;cACAR,aAAa,CAAC,IAAD,CAAb;YACD,CAHD,MAGO;cACLA,aAAa,CAAC,KAAD,CAAb;YACD;;YAX2B;YAAA;;UAAA;YAAA;YAAA;YAa5BO,OAAO,CAACE,KAAR;YACAT,aAAa,CAAC,KAAD,CAAb;;UAd4B;YAAA;YAgB5BF,UAAU,CAAC,KAAD,CAAV;YAhB4B;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAhC;;EAoBA,IAAID,OAAJ,EAAa,OAAO,KAAC,IAAD;IAAA;EAAA,EAAP;;EAEb,IAAIE,UAAU,IAAIE,OAAO,IAAI,IAA7B,EAAmC;IACjC,OACE,KAAC,cAAD;MACE,KAAK,EAAE,CAACS,MAAM,CAACC,SAAR,CADT;MAEE,gBAAgB,EAAE,gCAAoB;QAAA,IAAjBC,IAAiB,QAAjBA,IAAiB;QAAA,IAAXC,IAAW,QAAXA,IAAW;;QACpC,IAAI;UACFN,OAAO,CAACC,GAAR,CAAYI,IAAZ;UACAL,OAAO,CAACC,GAAR,CAAYK,IAAZ;UACAC,KAAK,CAACC,KAAN,CAAYF,IAAZ;UACAX,UAAU,CAAC,KAAD,CAAV;QACD,CALD,CAKE,OAAOO,KAAP,EAAc;UACdF,OAAO,CAACE,KAAR,CAAc,0BAAd,EAA0CA,KAA1C;QACD;MACF;IAXH,EADF;EAeD,CAhBD,MAgBO;IACL,OAAO,KAAC,YAAD;MAAc,KAAK,EAAC;IAApB,EAAP;EACD;AACF,CAlDD;;AAoDA,eAAed,UAAf;AAEA,IAAMe,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;EAC/BN,SAAS,EAAE;IACTO,IAAI,EAAE,CADG;IAETC,OAAO,EAAE,EAFA;IAGTC,UAAU,EAAE,QAHH;IAITC,cAAc,EAAE;EAJP,CADoB;EAO/BC,IAAI,EAAE;IACJC,SAAS,EAAE,EADP;IAEJC,eAAe,EAAE;EAFb,CAPyB;EAW/BC,SAAS,EAAE;IACTC,KAAK,EAAE;EADE;AAXoB,CAAlB,CAAf"},"metadata":{},"sourceType":"module"}